{"version":3,"sources":["components/Search.js","components/TestComponent.js","components/GoogleMap.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","props","setQuery","query","setState","handleAutocompleteSelect","a","geocodeByAddress","results","getLatLng","coordinates","setApp","placeData","state","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","style","height","width","fontSize","placeholder","className","map","suggestion","active","backgroundColor","cursor","description","React","Component","GoogleApiWrapper","apiKey","process","TestComponent","test","formatted_address","href","target","place_id","GoogleMap","componentDidMount","navigator","geolocation","getCurrentPosition","pos","console","log","coords","lat","latitude","lng","longitude","userLocation","showMarker","onMarkerClick","marker","event","selectedMarker","showWindow","onInfoWindowClose","google","center","initialCenter","zoom","clickableIcons","onClick","position","name","visible","onClose","App","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc6b8e64.chunk.js","sourcesContent":["import React from 'react'\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\nimport {GoogleApiWrapper} from 'google-maps-react'\n\nclass Search extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            query: ''\n        }\n    }\n\n// set query to find Place data\nsetQuery = query => {\n    this.setState({ query })\n}\n\n// send query to find Place data\n// use Place data to get coordinates\n// update state with coordinates and Place data\nhandleAutocompleteSelect = async query => {\n    const results = await geocodeByAddress(query)\n    const coordinates = await getLatLng(results[0])\n    this.props.setApp({ coordinates })\n    this.props.setApp({ placeData: results[0] })\n}\n\nrender() {\n    return (\n        <PlacesAutocomplete\n        value={this.state.query}\n        onChange={this.setQuery}\n        onSelect={this.handleAutocompleteSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n        <div>\n          <input\n            style={{ height: '40px', width: '100%', fontSize: '16px' }}\n            {...getInputProps({\n              placeholder: 'Search Places ...',\n              className: 'location-search-input',\n            })}\n          />\n          <div className=\"autocomplete-dropdown-container\">\n            {loading && <div>Loading...</div>}\n            {suggestions.map(suggestion => {\n              const className = suggestion.active\n                ? 'suggestion-item--active'\n                : 'suggestion-item';\n              // inline style for demonstration purpose\n              const style = suggestion.active\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\n              return (\n                <div\n                  {...getSuggestionItemProps(suggestion, {\n                    className,\n                    style,\n                  })}\n                >\n                  <span>{suggestion.description}</span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n      </PlacesAutocomplete>\n    )\n}\n    \n}\n\n\nexport default GoogleApiWrapper({\n  apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\n})(Search)","import React from 'react'\n\nclass TestComponent extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            test: true\n        }\n    }\n    // render information inside an infoWindow for POI\n    render() {\n        return (\n            <div>\n                <h1>test component</h1>\n                <p>{this.props.placeData.formatted_address}</p>\n                <a href={'https://developers.google.com/maps/documentation/javascript/tutorial'} target={'_blank'}>\n                  <button>display link to create a review</button>\n                </a>\n                <p>{this.props.placeData.place_id}</p>\n            </div>\n        )\n    }\n}\n\nexport default TestComponent\n","import React from 'react'\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'\nimport TestComponent from './TestComponent'\n\nclass GoogleMap extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            showWindow: false,\n            showMarker: false,\n            selectedMarker: null,\n            userLocation: ''\n        }\n    }\n\n    // Using geolocation from browser to location user location\n    componentDidMount = () => {\n      if(navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n        console.log('found user location')\n        const coords = pos.coords\n        const lat = coords.latitude\n        const lng = coords.longitude\n        this.setState({ userLocation: { lat, lng },\n                        showMarker: true })\n                      })\n      }\n    }\n\n    // onClick handler to set marker to state and show corresponding info window\n    onMarkerClick = (props, marker, event) => {\n        this.setState({ selectedMarker: marker, showWindow: true })\n    }\n\n    // onClose handler for InfoWindow\n    onInfoWindowClose = () => {\n        this.setState({ showWindow: false })\n    }\n\n    render() {\n        return (\n            <Map google={this.props.google}\n             center={this.props.coordinates}\n             initialCenter={this.props.initialCenter}\n             zoom={14}\n             clickableIcons={true}\n            >\n\n            {/* Marker needs a position prop to render, initially undefined\n                User search sets the coordinates and passed down as props.coordinates */}\n            <Marker onClick={this.onMarkerClick}\n                  position={this.state.userLocation}\n                  name={'Current location'}\n            />\n\n            {/* InfoWindow becomes visible when this.state.showWindow === true */}\n            <InfoWindow marker={this.state.selectedMarker}\n                      position={this.props.coordinates}\n                      visible={this.state.showWindow}\n                      onClose={this.onInfoWindowClose}\n            >\n                {/* Display placeData information inside InfoWindow */}\n                <TestComponent placeData={this.props.placeData} />\n\n            </InfoWindow>\n        </Map>\n        )\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\n  })(GoogleMap)\n","import React from 'react';\nimport '../App.css';\nimport Search from './Search'\nimport GoogleMap from './GoogleMap';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      coordinates: {\n        lat: null,\n        lng: null\n      },\n      placeData: '',\n      userLocation: { lat: 42.3601, lng: -71.0589}\n    } \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Search setApp={this.setState.bind(this)}/>\n\n          <GoogleMap\n            initialCenter={this.state.userLocation}\n            coordinates={this.state.coordinates}\n            placeData={this.state.placeData}\n          />\n\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}